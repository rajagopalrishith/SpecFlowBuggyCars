// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowBuggy.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Registration")]
    public partial class RegistrationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Registration.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Registration", "Feature to test successfull registration in buggy application", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
testRunner.Given("I open the buggy application home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate registration with password length not satisfied")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateRegistrationWithPasswordLengthNotSatisfied()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration with password length not satisfied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 10
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table3.AddRow(new string[] {
                            "rishith",
                            "rishith",
                            "rajagopal",
                            "1234",
                            "1234"});
#line 11
 testRunner.Then("I fill registration fields as below", ((string)(null)), table3, "Then ");
#line hidden
#line 14
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "errormessage"});
                table4.AddRow(new string[] {
                            "InvalidParameter: 1 validation error(s) found. - minimum field size of 8, SignUpI" +
                                "nput.Password."});
#line 15
 testRunner.And("I validate the following error message as below", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate registration with passwords not matching")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateRegistrationWithPasswordsNotMatching()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration with passwords not matching", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 24
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table5.AddRow(new string[] {
                            "rishith",
                            "rishith",
                            "rajagopal",
                            "1234",
                            "123"});
#line 25
 testRunner.Then("I fill registration fields as below", ((string)(null)), table5, "Then ");
#line hidden
#line 28
 testRunner.And("I validate error message for the condition Passwords do not match", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate successful registration for an user")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateSuccessfulRegistrationForAnUser()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate successful registration for an user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 34
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.Then("I fill registration fields with random values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And("I Validate registration is successfull", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate registration with existing username")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateRegistrationWithExistingUsername()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration with existing username", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 43
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table6.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            "Specialpassword_1",
                            "Specialpassword_1"});
#line 44
 testRunner.Then("I fill registration fields as below", ((string)(null)), table6, "Then ");
#line hidden
#line 47
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "errormessage"});
                table7.AddRow(new string[] {
                            "UsernameExistsException: User already exists"});
#line 48
 testRunner.And("I validate the following error message as below", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate registration with no Uppercase in password field")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateRegistrationWithNoUppercaseInPasswordField()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration with no Uppercase in password field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 55
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table8.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            "specialpassword_1",
                            "specialpassword_1"});
#line 56
 testRunner.Then("I fill registration fields as below", ((string)(null)), table8, "Then ");
#line hidden
#line 59
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "errormessage"});
                table9.AddRow(new string[] {
                            "InvalidPasswordException: Password did not conform with policy: Password must hav" +
                                "e uppercase characters"});
#line 60
 testRunner.And("I validate the following error message as below", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate registration with no Lowercase in password field")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateRegistrationWithNoLowercaseInPasswordField()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration with no Lowercase in password field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 67
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table10.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            "ABCDEFGH_1",
                            "ABCDEFGH_1"});
#line 68
 testRunner.Then("I fill registration fields as below", ((string)(null)), table10, "Then ");
#line hidden
#line 71
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "errormessage"});
                table11.AddRow(new string[] {
                            "InvalidPasswordException: Password did not conform with policy: Password must hav" +
                                "e lowercase characters"});
#line 72
 testRunner.And("I validate the following error message as below", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate registration with no special characters in password field")]
        [NUnit.Framework.CategoryAttribute("registration")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        public void ValidateRegistrationWithNoSpecialCharactersInPasswordField()
        {
            string[] tagsOfScenario = new string[] {
                    "registration",
                    "PasswordPolicy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration with no special characters in password field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 79
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table12.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            "ABCDEFGHe1",
                            "ABCDEFGHe1"});
#line 80
 testRunner.Then("I fill registration fields as below", ((string)(null)), table12, "Then ");
#line hidden
#line 83
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "errormessage"});
                table13.AddRow(new string[] {
                            "InvalidPasswordException: Password did not conform with policy: Password must hav" +
                                "e symbol characters"});
#line 84
 testRunner.And("I validate the following error message as below", ((string)(null)), table13, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password Policy Checks : Validate registration for password length = 8")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        [NUnit.Framework.TestCaseAttribute("11111111", null)]
        [NUnit.Framework.TestCaseAttribute("AAAAAAAA", null)]
        [NUnit.Framework.TestCaseAttribute("eeeeeeee", null)]
        [NUnit.Framework.TestCaseAttribute("Password", null)]
        [NUnit.Framework.TestCaseAttribute("@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("SPECIA@L", null)]
        [NUnit.Framework.TestCaseAttribute("aaaa@@@@", null)]
        public void PasswordPolicyChecksValidateRegistrationForPasswordLength8(string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PasswordPolicy"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Password", password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password Policy Checks : Validate registration for password length = 8", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 91
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table14.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            string.Format("{0}", password),
                            string.Format("{0}", password)});
#line 92
 testRunner.Then("I fill registration fields as below", ((string)(null)), table14, "Then ");
#line hidden
#line 95
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And("I validate password policy breach message is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password Policy Checks : Validate registration for password length = 7")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        [NUnit.Framework.TestCaseAttribute("1111111", null)]
        [NUnit.Framework.TestCaseAttribute("AAAAAAA", null)]
        [NUnit.Framework.TestCaseAttribute("eeeeeee", null)]
        [NUnit.Framework.TestCaseAttribute("Passwor", null)]
        [NUnit.Framework.TestCaseAttribute("@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("SPECIA@", null)]
        [NUnit.Framework.TestCaseAttribute("aaaa@@@", null)]
        [NUnit.Framework.TestCaseAttribute("Specil@", null)]
        public void PasswordPolicyChecksValidateRegistrationForPasswordLength7(string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PasswordPolicy"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Password", password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password Policy Checks : Validate registration for password length = 7", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 111
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table15.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            string.Format("{0}", password),
                            string.Format("{0}", password)});
#line 112
 testRunner.Then("I fill registration fields as below", ((string)(null)), table15, "Then ");
#line hidden
#line 115
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.And("I validate password policy breach message is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password Policy Checks : Validate registration for password length = 9")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        [NUnit.Framework.TestCaseAttribute("111111111", null)]
        [NUnit.Framework.TestCaseAttribute("AAAAAAAAA", null)]
        [NUnit.Framework.TestCaseAttribute("eeeeeeeee", null)]
        [NUnit.Framework.TestCaseAttribute("Passwords", null)]
        [NUnit.Framework.TestCaseAttribute("@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("SPECIA@LS", null)]
        [NUnit.Framework.TestCaseAttribute("aaaa@@@@a", null)]
        [NUnit.Framework.TestCaseAttribute("Special@1", null)]
        public void PasswordPolicyChecksValidateRegistrationForPasswordLength9(string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PasswordPolicy"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Password", password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password Policy Checks : Validate registration for password length = 9", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 131
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "login",
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table16.AddRow(new string[] {
                            "john",
                            "john",
                            "derek",
                            string.Format("{0}", password),
                            string.Format("{0}", password)});
#line 132
 testRunner.Then("I fill registration fields as below", ((string)(null)), table16, "Then ");
#line hidden
#line 135
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
 testRunner.And("I validate password policy breach message is shown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password Policy Checks : Validate Different Combinations of special characters")]
        [NUnit.Framework.CategoryAttribute("PasswordPolicy")]
        [NUnit.Framework.TestCaseAttribute("Special~1", null)]
        [NUnit.Framework.TestCaseAttribute("Special!1", null)]
        [NUnit.Framework.TestCaseAttribute("Special#1", null)]
        [NUnit.Framework.TestCaseAttribute("Special@1", null)]
        [NUnit.Framework.TestCaseAttribute("Special$1", null)]
        [NUnit.Framework.TestCaseAttribute("Special%1", null)]
        [NUnit.Framework.TestCaseAttribute("Special^1", null)]
        [NUnit.Framework.TestCaseAttribute("Special&1", null)]
        [NUnit.Framework.TestCaseAttribute("Special*1", null)]
        [NUnit.Framework.TestCaseAttribute("Special(1", null)]
        [NUnit.Framework.TestCaseAttribute("Special)1", null)]
        [NUnit.Framework.TestCaseAttribute("Special-1", null)]
        [NUnit.Framework.TestCaseAttribute("Special+1", null)]
        [NUnit.Framework.TestCaseAttribute("Special=1", null)]
        [NUnit.Framework.TestCaseAttribute("Special{1", null)]
        [NUnit.Framework.TestCaseAttribute("Special}1", null)]
        [NUnit.Framework.TestCaseAttribute("Special[1", null)]
        [NUnit.Framework.TestCaseAttribute("Special]1", null)]
        [NUnit.Framework.TestCaseAttribute("Special/1", null)]
        [NUnit.Framework.TestCaseAttribute("Special\\1", null)]
        [NUnit.Framework.TestCaseAttribute("Special<1", null)]
        [NUnit.Framework.TestCaseAttribute("Special>1", null)]
        [NUnit.Framework.TestCaseAttribute("Special[1", null)]
        [NUnit.Framework.TestCaseAttribute("Special]1", null)]
        [NUnit.Framework.TestCaseAttribute("Special?1", null)]
        public void PasswordPolicyChecksValidateDifferentCombinationsOfSpecialCharacters(string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PasswordPolicy"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Password", password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password Policy Checks : Validate Different Combinations of special characters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 152
 testRunner.Given("I navigate to application registration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Password",
                            "ConfirmPassword"});
                table17.AddRow(new string[] {
                            "john",
                            "derek",
                            string.Format("{0}", password),
                            string.Format("{0}", password)});
#line 153
 testRunner.Then("I fill registration fields with random username", ((string)(null)), table17, "Then ");
#line hidden
#line 156
 testRunner.Then("I click register button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
 testRunner.And("I Validate registration is successfull", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
